#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>

// Pines RC522 (SPI - ESP32)
#define RST_PIN 4
#define SS_PIN  5

// LED de estado (NO usar 22 porque es SCL de I2C)
#define LED_PIN 2

MFRC522 mfrc522(SS_PIN, RST_PIN);

// Usamos puntero para crear la LCD solo si se detecta en I2C
LiquidCrystal_I2C* lcd = nullptr;
bool lcd_ok = false;

//--- Utilidades ---
uint8_t scanI2C() {
  // Devuelve la primera dirección I2C encontrada o 0 si no hay nada
  for (uint8_t addr = 1; addr < 127; addr++) {
    Wire.beginTransmission(addr);
    if (Wire.endTransmission() == 0) return addr;
  }
  return 0;
}

String uidToString() {
  String s = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) s += "0";
    s += String(mfrc522.uid.uidByte[i], HEX);
    if (i < mfrc522.uid.size - 1) s += ":";
  }
  s.toUpperCase();
  return s;
}

unsigned long lastStatusPrint = 0;

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  Serial.begin(9600);
  // No usamos while(!Serial) para evitar bloqueos

  // I2C en ESP32 (SDA=21, SCL=22)
  Wire.begin(21, 22);
  uint8_t lcd_addr = scanI2C();
  if (lcd_addr) {
    Serial.print("LCD I2C encontrada en 0x");
    if (lcd_addr < 16) Serial.print("0");
    Serial.println(lcd_addr, HEX);
    lcd = new LiquidCrystal_I2C(lcd_addr, 16, 2);
    // Tu librería usa begin() sin parámetros
    lcd->begin();
    lcd->backlight();
    lcd->clear();
    lcd->setCursor(0, 0);
    lcd->print("Esperando...");
    lcd_ok = true;
  } else {
    Serial.println("No se detecto LCD en el bus I2C. Continuo solo con Serial.");
    lcd_ok = false;
  }

  // SPI en ESP32 (SCK=18, MISO=19, MOSI=23, SS=5)
  SPI.begin(18, 19, 23, SS_PIN);
  mfrc522.PCD_Init();
  delay(4);
  mfrc522.PCD_DumpVersionToSerial();
  Serial.println("Listo. Acerque tarjeta al RC522.");
}

void loop() {
  // Si no hay tarjeta presente
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    unsigned long now = millis();
    if (now - lastStatusPrint >= 1000) {
      Serial.println("Esperando tarjeta...");
      if (lcd_ok) {
        lcd->clear();
        lcd->setCursor(0, 0);
        lcd->print("Esperando...");
      }
      digitalWrite(LED_PIN, LOW);
      lastStatusPrint = now;
    }
    return;
  }

  // Si hay tarjeta, armamos el UID
  String uid = uidToString();

  // Serial
  Serial.print("Detectado UID: ");
  Serial.println(uid);

  // LCD (si está)
  if (lcd_ok) {
    lcd->clear();
    lcd->setCursor(0, 0);
    lcd->print("Detectado");
    lcd->setCursor(0, 1);
    // recortamos si no entra en 16 chars
    if (uid.length() > 16) {
      lcd->print(uid.substring(0, 16));
    } else {
      lcd->print(uid);
    }
  }

  // LED ON un instante
  digitalWrite(LED_PIN, HIGH);
  delay(1000);
  digitalWrite(LED_PIN, LOW);

  // Cerrar comunicación con la tarjeta
  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();

  // Forzar que vuelva a mostrar "Esperando..." pronto
  lastStatusPrint = 0;
}
